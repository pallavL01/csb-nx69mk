{"version":3,"sources":["src/Game.js","src/GameView.js","src/main.js"],"names":["Game","turn","board","Array","fill","i","isInProgress","findWinningCombination","nextTurn","winningCombinations","combination","a","b","c","includes","GameView","root","innerHTML","onTileClick","undefined","onRestartClick","querySelectorAll","forEach","tile","addEventListener","dataset","index","querySelector","game","updateTurn","updateStatus","updateBoard","textContent","status","winningCombination","length","classList","remove","add","gameView","document","getElementById","makeMove","update"],"mappings":";AAuDG,aAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,6IAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,MAAA,EAAA,KAAA,oBAAA,QAAA,EAAA,OAAA,WAAA,EAAA,cAAA,GAAA,MAAA,EAAA,CAAA,IAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,IAAA,IAAA,EAAA,EAAA,KAAA,KAAA,GAAA,EAAA,EAAA,QAAA,QAAA,EAAA,KAAA,EAAA,QAAA,GAAA,EAAA,SAAA,GAAA,GAAA,IAAA,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,OAAA,eAAA,EAAA,YAAA,CAAA,UAAA,IAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAvDkBA,IAAAA,EAAAA,WACL,SAAA,IAAA,EAAA,KAAA,GACPC,KAAAA,KAAO,IACPC,KAAAA,MAAQ,IAAIC,MAAM,GAAGC,KAAK,MAoDhC,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,WAjDD,MAAA,WACOH,KAAAA,KAAqB,MAAd,KAAKA,KAAe,IAAM,MAgDvC,CAAA,IAAA,WA7CD,MAAA,SAASI,GACF,KAAKC,iBAIN,KAAKJ,MAAMG,KAIVH,KAAAA,MAAMG,GAAK,KAAKJ,KAEhB,KAAKM,0BACHC,KAAAA,eAiCR,CAAA,IAAA,yBA7BD,MAAA,WAY4BC,IAXpBA,IAWoBA,EAAAA,EAAAA,EAXE,CAC1B,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGsC,EAAA,EAAA,OAAA,IAAA,CAApCC,IAAAA,EAAN,EAAA,GACeA,EAAAA,EAAAA,EAAlB,GAAOC,EAAP,EAAA,GAAUC,EAAV,EAAA,GAAaC,EAAb,EAAA,GAGE,GAAA,KAAKX,MAAMS,IACX,KAAKT,MAAMS,KAAO,KAAKT,MAAMU,IAC7B,KAAKV,MAAMS,KAAO,KAAKT,MAAMW,GAEtBH,OAAAA,EAIJ,OAAA,OAKR,CAAA,IAAA,eAFD,MAAA,WACS,OAAC,KAAKH,0BAA4B,KAAKL,MAAMY,SAAS,UAC9D,EAvDkBd,GAuDlB,QAAA,QAAA;;AC0BA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,OAAA,eAAA,EAAA,YAAA,CAAA,UAAA,IAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAjFkBe,IAAAA,EAAAA,WACPC,SAAAA,EAAAA,GAAM,IAAA,EAAA,KAAA,EAAA,KAAA,GACXA,KAAAA,KAAOA,EACPA,KAAAA,KAAKC,UAAV,84BAqBKC,KAAAA,iBAAcC,EACdC,KAAAA,oBAAiBD,EAEjBH,KAAAA,KAAKK,iBAAiB,gBAAgBC,QAAQ,SAACC,GAClDA,EAAKC,iBAAiB,QAAS,WACzB,EAAKN,aACP,EAAKA,YAAYK,EAAKE,QAAQC,WAK/BV,KAAAA,KACFW,cAAc,oBACdH,iBAAiB,QAAS,WACrB,EAAKJ,gBACP,EAAKA,mBA0CZ,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,SArCD,MAAA,SAAOQ,GACAC,KAAAA,WAAWD,GACXE,KAAAA,aAAaF,GACbG,KAAAA,YAAYH,KAkClB,CAAA,IAAA,aA/BD,MAAA,SAAWA,GACJZ,KAAAA,KAAKW,cACR,iBACAK,YAAiBJ,GAAAA,OAAAA,EAAK3B,KAFxB,aA8BD,CAAA,IAAA,eAzBD,MAAA,SAAa2B,GACPK,IAAAA,EAAS,cAETL,EAAKrB,yBACP0B,EAAYL,GAAAA,OAAAA,EAAK3B,KAAjB,mBACU2B,EAAKtB,iBACf2B,EAAS,eAGNjB,KAAAA,KAAKW,cAAc,mBAAmBK,YAAcC,IAgB1D,CAAA,IAAA,cAbD,MAAA,SAAYL,GAGL,IAFCM,IAAAA,EAAqBN,EAAKrB,yBAEvBF,EAAI,EAAGA,EAAIuB,EAAK1B,MAAMiC,OAAQ9B,IAAK,CACpCkB,IAAAA,EAAO,KAAKP,KAAKW,cAA0CtB,4BAAAA,OAAAA,EAAjE,OAEAkB,EAAKa,UAAUC,OAAO,uBACtBd,EAAKS,YAAcJ,EAAK1B,MAAMG,GAE1B6B,GAAsBA,EAAmBpB,SAAST,IACpDkB,EAAKa,UAAUE,IAAI,4BAGxB,EAjFkBvB,GAiFlB,QAAA,QAAA;;AChEH,aAjBA,IAAA,EAAA,EAAA,QAAA,cACA,EAAA,EAAA,QAAA,kBAgBA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAdA,IAAIa,EAAO,IAAI5B,EAAJ,QACPuC,EAAW,IAAIxB,EAAJ,QAAayB,SAASC,eAAe,QAGpDF,EAASrB,YAAc,SAAUb,GAC/BuB,EAAKc,SAASrC,GACdkC,EAASI,OAAOf,IAGlBW,EAASnB,eAAiB,WACxBQ,EAAO,IAAI5B,EAAJ,QACPuC,EAASI,OAAOf,IAGlBW,EAASI,OAAOf","file":"main.c0286f70.js","sourceRoot":"..","sourcesContent":["export default class Game {\n  constructor() {\n    this.turn = \"X\";\n    this.board = new Array(9).fill(null);\n  }\n\n  nextTurn() {\n    this.turn = this.turn === \"X\" ? \"O\" : \"X\";\n  }\n\n  makeMove(i) {\n    if (!this.isInProgress()) {\n      return;\n    }\n\n    if (this.board[i]) {\n      return;\n    }\n\n    this.board[i] = this.turn;\n\n    if (!this.findWinningCombination()) {\n      this.nextTurn();\n    }\n  }\n\n  findWinningCombination() {\n    const winningCombinations = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n\n    for (const combination of winningCombinations) {\n      const [a, b, c] = combination;\n\n      if (\n        this.board[a] &&\n        this.board[a] === this.board[b] &&\n        this.board[a] === this.board[c]\n      ) {\n        return combination;\n      }\n    }\n\n    return null;\n  }\n\n  isInProgress() {\n    return !this.findWinningCombination() && this.board.includes(null);\n  }\n}\n","export default class GameView {\n  constructor(root) {\n    this.root = root;\n    this.root.innerHTML = `\n          <div class=\"header\">\n              <div class=\"header__turn\"></div>\n              <div class=\"header__status\"></div>\n              <button type=\"button\" class=\"header__restart\">\n                  <i class=\"material-icons\">refresh</i>\n              </button>\n          </div>\n          <div class=\"board\">\n              <div class=\"board__tile\" data-index=\"0\"></div>\n              <div class=\"board__tile\" data-index=\"1\"></div>\n              <div class=\"board__tile\" data-index=\"2\"></div>\n              <div class=\"board__tile\" data-index=\"3\"></div>\n              <div class=\"board__tile\" data-index=\"4\"></div>\n              <div class=\"board__tile\" data-index=\"5\"></div>\n              <div class=\"board__tile\" data-index=\"6\"></div>\n              <div class=\"board__tile\" data-index=\"7\"></div>\n              <div class=\"board__tile\" data-index=\"8\"></div>\n          </div>\n      `;\n\n    this.onTileClick = undefined;\n    this.onRestartClick = undefined;\n\n    this.root.querySelectorAll(\".board__tile\").forEach((tile) => {\n      tile.addEventListener(\"click\", () => {\n        if (this.onTileClick) {\n          this.onTileClick(tile.dataset.index);\n        }\n      });\n    });\n\n    this.root\n      .querySelector(\".header__restart\")\n      .addEventListener(\"click\", () => {\n        if (this.onRestartClick) {\n          this.onRestartClick();\n        }\n      });\n  }\n\n  update(game) {\n    this.updateTurn(game);\n    this.updateStatus(game);\n    this.updateBoard(game);\n  }\n\n  updateTurn(game) {\n    this.root.querySelector(\n      \".header__turn\"\n    ).textContent = `${game.turn}'s turn`;\n  }\n\n  updateStatus(game) {\n    let status = \"In Progress\";\n\n    if (game.findWinningCombination()) {\n      status = `${game.turn} is the Winner!`;\n    } else if (!game.isInProgress()) {\n      status = \"It's a tie!\";\n    }\n\n    this.root.querySelector(\".header__status\").textContent = status;\n  }\n\n  updateBoard(game) {\n    const winningCombination = game.findWinningCombination();\n\n    for (let i = 0; i < game.board.length; i++) {\n      const tile = this.root.querySelector(`.board__tile[data-index=\"${i}\"]`);\n\n      tile.classList.remove(\"board__tile--winner\");\n      tile.textContent = game.board[i];\n\n      if (winningCombination && winningCombination.includes(i)) {\n        tile.classList.add(\"board__tile--winner\");\n      }\n    }\n  }\n}\n","import Game from \"./Game.js\";\nimport GameView from \"./GameView.js\";\n\nlet game = new Game();\nlet gameView = new GameView(document.getElementById(\"app\"));\n\n// define functions\ngameView.onTileClick = function (i) {\n  game.makeMove(i);\n  gameView.update(game);\n};\n\ngameView.onRestartClick = function () {\n  game = new Game();\n  gameView.update(game);\n};\n\ngameView.update(game);\n"]}